Stack,Name,Gas,InitialStack,ResultingStack,MemStorage,Notes,Category
0x0,STOP,0,,,,halt execution,Stop Operation
0x1,ADD,3,"a, b",a + b,,(u)int256 addition modulo 2**256,Arithmetic Operation
0x2,MUL,5,"a, b",a * b,,(u)int256 multiplication modulo 2**256,Arithmetic Operation
0x3,SUB,3,"a, b",a - b,,(u)int256 addition modulo 2**256,Arithmetic Operation
0x4,DIV,5,"a, b",a // b,,uint256 division,Arithmetic Operation
0x5,SDIV,5,"a, b",a // b,,int256 division,Arithmetic Operation
0x6,MOD,5,"a, b",a % b,,uint256 modulus,Arithmetic Operation
0x7,SMOD,5,"a, b",a % b,,int256 modulus,Arithmetic Operation
0x8,ADDMOD,8,"a, b, N",(a + b) % N,,(u)int256 addition modulo N,Arithmetic Operation
0x9,MULMOD,8,"a, b, N",(a * b) % N,,(u)int256 multiplication modulo N,Arithmetic Operation
0xa,EXP,A1(opens in a new tab),"a, b",a ** b,,uint256 exponentiation modulo 2**256,Arithmetic Operation
0xb,SIGNEXTEND,5,"b, x","SIGNEXTEND(x, b)",,sign extend(opens in a new tab) x from (b+1) bytes to 32 bytes,Arithmetic Operation
0x0c-0f,invalid,,,,,,
0x10,LT,3,"a, b",a < b,,uint256 less-than,Comparison Operation
0x11,GT,3,"a, b",a > b,,uint256 greater-than,Comparison Operation
0x12,SLT,3,"a, b",a < b,,int256 less-than,Comparison Operation
0x13,SGT,3,"a, b",a > b,,int256 greater-than,Comparison Operation
0x14,EQ,3,"a, b",a == b,,(u)int256 equality,Comparison Operation
0x15,ISZERO,3,a,a == 0,,(u)int256 iszero,Comparison Operation
0x16,AND,3,"a, b",a && b,,bitwise AND,Bitwise Logic Operation
0x17,OR,3,"a, b",a \|\| b,,bitwise OR,Bitwise Logic Operation
0x18,XOR,3,"a, b",a ^ b,,bitwise XOR,Bitwise Logic Operation
0x19,NOT,3,a,~a,,bitwise NOT,Bitwise Logic Operation
0x1a,BYTE,3,"i, x",(x >> (248 - i * 8)) && 0xFF,,"ith byte of (u)int256 x, from the left",Bitwise Logic Operation
0x1b,SHL,3,"shift, val",val << shift,,shift left,Bitwise Logic Operation
0x1c,SHR,3,"shift, val",val >> shift,,logical shift right,Bitwise Logic Operation
0x1d,SAR,3,"shift, val",val >> shift,,arithmetic shift right,Bitwise Logic Operation
0x1e-1f,invalid,,,,,,
0x20,KECCAK256,A2(opens in a new tab),"ost, len",keccak256(mem[ost:ost+len-1]),,keccak256,KECCAK256 Operation
0x21-2f,invalid,,,,,,
0x30,ADDRESS,2,.,address(this),,address of executing contract,Environmental Information Operation
0x31,BALANCE,A5(opens in a new tab),addr,addr.balance,,"balance, in wei",Environmental Information Operation
0x32,ORIGIN,2,.,tx.origin,,address that originated the tx,Environmental Information Operation
0x33,CALLER,2,.,msg.sender,,address of msg sender,Environmental Information Operation
0x34,CALLVALUE,2,.,msg.value,,"msg value, in wei",Environmental Information Operation
0x35,CALLDATALOAD,3,idx,msg.data[idx:idx+32],,read word from msg data at index idx,Environmental Information Operation
0x36,CALLDATASIZE,2,.,len(msg.data),,"length of msg data, in bytes",Environmental Information Operation
0x37,CALLDATACOPY,A3(opens in a new tab),"dstOst, ost, len",.,mem[dstOst:dstOst+len-1] := msg.data[ost:ost+len-1],copy msg data,Environmental Information Operation
0x38,CODESIZE,2,.,len(this.code),,"length of executing contract's code, in bytes",Environmental Information Operation
0x39,CODECOPY,A3(opens in a new tab),"dstOst, ost, len",.,,mem[dstOst:dstOst+len-1] := this.code[ost:ost+len-1],Environmental Information Operation
0x3a,GASPRICE,2,.,tx.gasprice,,"gas price of tx, in wei per unit gas **(opens in a new tab)",Environmental Information Operation
0x3b,EXTCODESIZE,A5(opens in a new tab),addr,len(addr.code),,"size of code at addr, in bytes",Environmental Information Operation
0x3c,EXTCODECOPY,A4(opens in a new tab),"addr, dstOst, ost, len",.,mem[dstOst:dstOst+len-1] := addr.code[ost:ost+len-1],copy code from addr,Environmental Information Operation
0x3d,RETURNDATASIZE,2,.,size,,"size of returned data from last external call, in bytes",Environmental Information Operation
0x3e,RETURNDATACOPY,A3(opens in a new tab),"dstOst, ost, len",.,mem[dstOst:dstOst+len-1] := returndata[ost:ost+len-1],copy returned data from last external call,Environmental Information Operation
0x3f,EXTCODEHASH,A5(opens in a new tab),addr,hash,,hash = addr.exists ? keccak256(addr.code) : 0,Environmental Information Operation
0x40,BLOCKHASH,20,blockNum,blockHash(blockNum),,,Block Information Operation
0x41,COINBASE,2,.,block.coinbase,,address of proposer of current block,Block Information Operation
0x42,TIMESTAMP,2,.,block.timestamp,,timestamp of current block,Block Information Operation
0x43,NUMBER,2,.,block.number,,number of current block,Block Information Operation
0x44,PREVRANDAO,2,.,randomness beacon,,randomness beacon,Block Information Operation
0x45,GASLIMIT,2,.,block.gaslimit,,gas limit of current block,Block Information Operation
0x46,CHAINID,2,.,chain_id,,push current chain id(opens in a new tab) onto stack,Block Information Operation
0x47,SELFBALANCE,5,.,address(this).balance,,"balance of executing contract, in wei",Block Information Operation
0x48,BASEFEE,2,.,block.basefee,,base fee of current block,Block Information Operation
0x49,BLOBHASH,3,idx,tx.blob_versioned_hashes[idx],,EIP-4844(opens in a new tab),Block Information Operation
0x4a,BLOBBASEFEE,2,.,block.blobbasefee,,blob base fee of current block (EIP-7516(opens in a new tab)),Block Information Operation
0x4b-4f,invalid,,,,,,
0x50,POP,2,_anon,.,,remove item from top of stack and discard it,"Stack, Memory, Storage, and Flow Operation"
0x51,MLOAD,3*(opens in a new tab),ost,mem[ost:ost+32],,read word from memory at offset ost,"Stack, Memory, Storage, and Flow Operation"
0x52,MSTORE,3*(opens in a new tab),"ost, val",.,mem[ost:ost+32] := val,write a word to memory,"Stack, Memory, Storage, and Flow Operation"
0x53,MSTORE8,3*(opens in a new tab),"ost, val",.,mem[ost] := val && 0xFF,write a single byte to memory,"Stack, Memory, Storage, and Flow Operation"
0x54,SLOAD,A6(opens in a new tab),key,storage[key],,read word from storage,"Stack, Memory, Storage, and Flow Operation"
0x55,SSTORE,A7(opens in a new tab),"key, val",.,storage[key] := val,write word to storage,"Stack, Memory, Storage, and Flow Operation"
0x56,JUMP,8,dst,.,,$pc := dst mark that pc is only assigned if dst is a valid jumpdest,"Stack, Memory, Storage, and Flow Operation"
0x57,JUMPI,10,"dst, condition",.,,$pc := condition ? dst : $pc + 1,"Stack, Memory, Storage, and Flow Operation"
0x58,PC,2,.,$pc,,program counter,"Stack, Memory, Storage, and Flow Operation"
0x59,MSIZE,2,.,len(mem),,"size of memory in current execution context, in bytes","Stack, Memory, Storage, and Flow Operation"
0x5a,GAS,2,.,gasRemaining,,,"Stack, Memory, Storage, and Flow Operation"
0x5b,JUMPDEST,1,,,mark valid jump destination,a valid jump destination for example a jump destination not inside the push data,"Stack, Memory, Storage, and Flow Operation"
0x5c,TLOAD,100,key,tstorage[key],,read word from transient storage (EIP-1153(opens in a new tab)),"Stack, Memory, Storage, and Flow Operation"
0x5d,TSTORE,100,"key, val",.,tstorage[key] := val,write word to transient storage (EIP-1153(opens in a new tab)),"Stack, Memory, Storage, and Flow Operation"
0x5e,MCOPY,3+3*words+A0(opens in a new tab),"dstOst, ost, len",.,mem[dstOst] := mem[ost:ost+len],copy memory from one area to another (EIP-5656(opens in a new tab)),"Stack, Memory, Storage, and Flow Operation"
0x5f,PUSH0,2,.,uint8,,push the constant value 0 onto stack,Push Operation
0x60,PUSH1,3,.,uint8,,push 1-byte value onto stack,Push Operation
0x61,PUSH2,3,.,uint16,,push 2-byte value onto stack,Push Operation
0x62,PUSH3,3,.,uint24,,push 3-byte value onto stack,Push Operation
0x63,PUSH4,3,.,uint32,,push 4-byte value onto stack,Push Operation
0x64,PUSH5,3,.,uint40,,push 5-byte value onto stack,Push Operation
0x65,PUSH6,3,.,uint48,,push 6-byte value onto stack,Push Operation
0x66,PUSH7,3,.,uint56,,push 7-byte value onto stack,Push Operation
0x67,PUSH8,3,.,uint64,,push 8-byte value onto stack,Push Operation
0x68,PUSH9,3,.,uint72,,push 9-byte value onto stack,Push Operation
0x69,PUSH10,3,.,uint80,,push 10-byte value onto stack,Push Operation
0x6a,PUSH11,3,.,uint88,,push 11-byte value onto stack,Push Operation
0x6b,PUSH12,3,.,uint96,,push 12-byte value onto stack,Push Operation
0x6c,PUSH13,3,.,uint104,,push 13-byte value onto stack,Push Operation
0x6d,PUSH14,3,.,uint112,,push 14-byte value onto stack,Push Operation
0x6e,PUSH15,3,.,uint120,,push 15-byte value onto stack,Push Operation
0x6f,PUSH16,3,.,uint128,,push 16-byte value onto stack,Push Operation
0x70,PUSH17,3,.,uint136,,push 17-byte value onto stack,Push Operation
0x71,PUSH18,3,.,uint144,,push 18-byte value onto stack,Push Operation
0x72,PUSH19,3,.,uint152,,push 19-byte value onto stack,Push Operation
0x73,PUSH20,3,.,uint160,,push 20-byte value onto stack,Push Operation
0x74,PUSH21,3,.,uint168,,push 21-byte value onto stack,Push Operation
0x75,PUSH22,3,.,uint176,,push 22-byte value onto stack,Push Operation
0x76,PUSH23,3,.,uint184,,push 23-byte value onto stack,Push Operation
0x77,PUSH24,3,.,uint192,,push 24-byte value onto stack,Push Operation
0x78,PUSH25,3,.,uint200,,push 25-byte value onto stack,Push Operation
0x79,PUSH26,3,.,uint208,,push 26-byte value onto stack,Push Operation
0x7a,PUSH27,3,.,uint216,,push 27-byte value onto stack,Push Operation
0x7b,PUSH28,3,.,uint224,,push 28-byte value onto stack,Push Operation
0x7c,PUSH29,3,.,uint232,,push 29-byte value onto stack,Push Operation
0x7d,PUSH30,3,.,uint240,,push 30-byte value onto stack,Push Operation
0x7e,PUSH31,3,.,uint248,,push 31-byte value onto stack,Push Operation
0x7f,PUSH32,3,.,uint256,,push 32-byte value onto stack,Push Operation
0x80,DUP1,3,a,"a, a",,clone 1st value on stack,Duplication Operation
0x81,DUP2,3,"_, a","a, _, a",,clone 2nd value on stack,Duplication Operation
0x82,DUP3,3,"_, _, a","a, _, _, a",,clone 3rd value on stack,Duplication Operation
0x83,DUP4,3,"_, _, _, a","a, _, _, _, a",,clone 4th value on stack,Duplication Operation
0x84,DUP5,3,"..., a","a, ..., a",,clone 5th value on stack,Duplication Operation
0x85,DUP6,3,"..., a","a, ..., a",,clone 6th value on stack,Duplication Operation
0x86,DUP7,3,"..., a","a, ..., a",,clone 7th value on stack,Duplication Operation
0x87,DUP8,3,"..., a","a, ..., a",,clone 8th value on stack,Duplication Operation
0x88,DUP9,3,"..., a","a, ..., a",,clone 9th value on stack,Duplication Operation
0x89,DUP10,3,"..., a","a, ..., a",,clone 10th value on stack,Duplication Operation
0x8a,DUP11,3,"..., a","a, ..., a",,clone 11th value on stack,Duplication Operation
0x8b,DUP12,3,"..., a","a, ..., a",,clone 12th value on stack,Duplication Operation
0x8c,DUP13,3,"..., a","a, ..., a",,clone 13th value on stack,Duplication Operation
0x8d,DUP14,3,"..., a","a, ..., a",,clone 14th value on stack,Duplication Operation
0x8e,DUP15,3,"..., a","a, ..., a",,clone 15th value on stack,Duplication Operation
0x8f,DUP16,3,"..., a","a, ..., a",,clone 16th value on stack,Duplication Operation
0x90,SWAP1,3,"a, b","b, a",,,Exchange Operation
0x91,SWAP2,3,"a, _, b","b, _, a",,,Exchange Operation
0x92,SWAP3,3,"a, _, _, b","b, _, _, a",,,Exchange Operation
0x93,SWAP4,3,"a, _, _, _, b","b, _, _, _, a",,,Exchange Operation
0x94,SWAP5,3,"a, ..., b","b, ..., a",,,Exchange Operation
0x95,SWAP6,3,"a, ..., b","b, ..., a",,,Exchange Operation
0x96,SWAP7,3,"a, ..., b","b, ..., a",,,Exchange Operation
0x97,SWAP8,3,"a, ..., b","b, ..., a",,,Exchange Operation
0x98,SWAP9,3,"a, ..., b","b, ..., a",,,Exchange Operation
0x99,SWAP10,3,"a, ..., b","b, ..., a",,,Exchange Operation
0x9a,SWAP11,3,"a, ..., b","b, ..., a",,,Exchange Operation
0x9b,SWAP12,3,"a, ..., b","b, ..., a",,,Exchange Operation
0x9c,SWAP13,3,"a, ..., b","b, ..., a",,,Exchange Operation
0x9d,SWAP14,3,"a, ..., b","b, ..., a",,,Exchange Operation
0x9e,SWAP15,3,"a, ..., b","b, ..., a",,,Exchange Operation
0x9f,SWAP16,3,"a, ..., b","b, ..., a",,,Exchange Operation
0xa0,LOG0,A8(opens in a new tab),"ost, len",.,,LOG0(memory[ost:ost+len-1]),Logging Operation
0xa1,LOG1,A8(opens in a new tab),"ost, len, topic0",.,,"LOG1(memory[ost:ost+len-1], topic0)",Logging Operation
0xa2,LOG2,A8(opens in a new tab),"ost, len, topic0, topic1",.,,"LOG2(memory[ost:ost+len-1], topic0, topic1)",Logging Operation
0xa3,LOG3,A8(opens in a new tab),"ost, len, topic0, topic1, topic2",.,,"LOG3(memory[ost:ost+len-1], topic0, topic1, topic2)",Logging Operation
0xa4,LOG4,A8(opens in a new tab),"ost, len, topic0, topic1, topic2, topic3",.,,"LOG4(memory[ost:ost+len-1], topic0, topic1, topic2, topic3)",Logging Operation
0xa5-ef,invalid,,,,,,
0xf0,CREATE,A9(opens in a new tab),"val, ost, len",addr,,"addr = keccak256(rlp([address(this), this.nonce]))",System Operation
0xf1,CALL,AA(opens in a new tab),"gas, addr, val, argOst, argLen, retOst, retLen",success,mem[retOst:retOst+retLen-1] := returndata,,System Operation
0xf2,CALLCODE,AA(opens in a new tab),"gas, addr, val, argOst, argLen, retOst, retLen",success,mem[retOst:retOst+retLen-1] = returndata,"same as DELEGATECALL, but does not propagate original msg.sender and msg.value",System Operation
0xf3,RETURN,0*(opens in a new tab),"ost, len",.,,return mem[ost:ost+len-1],System Operation
0xf4,DELEGATECALL,AA(opens in a new tab),"gas, addr, argOst, argLen, retOst, retLen",success,mem[retOst:retOst+retLen-1] := returndata,,System Operation
0xf5,CREATE2,A9(opens in a new tab),"val, ost, len, salt",addr,,addr = keccak256(0xff ++ address(this) ++ salt ++ keccak256(mem[ost:ost+len-1]))[12:],System Operation
0xf6-f9,invalid,,,,,,
0xfa,STATICCALL,AA(opens in a new tab),"gas, addr, argOst, argLen, retOst, retLen",success,mem[retOst:retOst+retLen-1] := returndata,,System Operation
0xfb-fc,invalid,,,,,,
0xfd,REVERT,0*(opens in a new tab),"ost, len",.,,revert(mem[ost:ost+len-1]),System Operation
0xfe,INVALID,AF(opens in a new tab),,,designated invalid opcode - EIP-141(opens in a new tab),,System Operation
0xff,SELFDESTRUCT,AB(opens in a new tab),addr,.,,sends all ETH to addr; if executed in the same transaction as a contract was created it destroys the contract,System Operation
